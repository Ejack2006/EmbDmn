// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBSCHEMA_EMBDMN_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_FBSCHEMA_EMBDMN_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace EmbDmn {
namespace Protocol {

struct DeviceInfo;
struct DeviceInfoBuilder;

struct Frame;
struct FrameBuilder;

enum MsgType : int8_t {
  MsgType_Connect = 0,
  MsgType_Ping = 1,
  MsgType_Pong = 2,
  MsgType_RequestDeviceInfo = 3,
  MsgType_RespondDeviceInfo = 4,
  MsgType_Disconnect = 5,
  MsgType_CloseDaemon = 6,
  MsgType_MIN = MsgType_Connect,
  MsgType_MAX = MsgType_CloseDaemon
};

inline const MsgType (&EnumValuesMsgType())[7] {
  static const MsgType values[] = {
    MsgType_Connect,
    MsgType_Ping,
    MsgType_Pong,
    MsgType_RequestDeviceInfo,
    MsgType_RespondDeviceInfo,
    MsgType_Disconnect,
    MsgType_CloseDaemon
  };
  return values;
}

inline const char * const *EnumNamesMsgType() {
  static const char * const names[8] = {
    "Connect",
    "Ping",
    "Pong",
    "RequestDeviceInfo",
    "RespondDeviceInfo",
    "Disconnect",
    "CloseDaemon",
    nullptr
  };
  return names;
}

inline const char *EnumNameMsgType(MsgType e) {
  if (::flatbuffers::IsOutRange(e, MsgType_Connect, MsgType_CloseDaemon)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMsgType()[index];
}

enum Data : uint8_t {
  Data_NONE = 0,
  Data_deviceinfo = 1,
  Data_MIN = Data_NONE,
  Data_MAX = Data_deviceinfo
};

inline const Data (&EnumValuesData())[2] {
  static const Data values[] = {
    Data_NONE,
    Data_deviceinfo
  };
  return values;
}

inline const char * const *EnumNamesData() {
  static const char * const names[3] = {
    "NONE",
    "deviceinfo",
    nullptr
  };
  return names;
}

inline const char *EnumNameData(Data e) {
  if (::flatbuffers::IsOutRange(e, Data_NONE, Data_deviceinfo)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesData()[index];
}

template<typename T> struct DataTraits {
  static const Data enum_value = Data_NONE;
};

template<> struct DataTraits<EmbDmn::Protocol::DeviceInfo> {
  static const Data enum_value = Data_deviceinfo;
};

bool VerifyData(::flatbuffers::Verifier &verifier, const void *obj, Data type);
bool VerifyDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct DeviceInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DeviceInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VERSION = 6,
    VT_SERIALNUMBER = 8,
    VT_DESCRIPTION = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  const ::flatbuffers::String *serialnumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERIALNUMBER);
  }
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyOffset(verifier, VT_SERIALNUMBER) &&
           verifier.VerifyString(serialnumber()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           verifier.EndTable();
  }
};

struct DeviceInfoBuilder {
  typedef DeviceInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(DeviceInfo::VT_NAME, name);
  }
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(DeviceInfo::VT_VERSION, version);
  }
  void add_serialnumber(::flatbuffers::Offset<::flatbuffers::String> serialnumber) {
    fbb_.AddOffset(DeviceInfo::VT_SERIALNUMBER, serialnumber);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(DeviceInfo::VT_DESCRIPTION, description);
  }
  explicit DeviceInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DeviceInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DeviceInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DeviceInfo> CreateDeviceInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0,
    ::flatbuffers::Offset<::flatbuffers::String> serialnumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0) {
  DeviceInfoBuilder builder_(_fbb);
  builder_.add_description(description);
  builder_.add_serialnumber(serialnumber);
  builder_.add_version(version);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DeviceInfo> CreateDeviceInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *version = nullptr,
    const char *serialnumber = nullptr,
    const char *description = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto serialnumber__ = serialnumber ? _fbb.CreateString(serialnumber) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  return EmbDmn::Protocol::CreateDeviceInfo(
      _fbb,
      name__,
      version__,
      serialnumber__,
      description__);
}

struct Frame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FrameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSGTYPE = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  EmbDmn::Protocol::MsgType msgtype() const {
    return static_cast<EmbDmn::Protocol::MsgType>(GetField<int8_t>(VT_MSGTYPE, 0));
  }
  EmbDmn::Protocol::Data data_type() const {
    return static_cast<EmbDmn::Protocol::Data>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const EmbDmn::Protocol::DeviceInfo *data_as_deviceinfo() const {
    return data_type() == EmbDmn::Protocol::Data_deviceinfo ? static_cast<const EmbDmn::Protocol::DeviceInfo *>(data()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_MSGTYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyData(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const EmbDmn::Protocol::DeviceInfo *Frame::data_as<EmbDmn::Protocol::DeviceInfo>() const {
  return data_as_deviceinfo();
}

struct FrameBuilder {
  typedef Frame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_msgtype(EmbDmn::Protocol::MsgType msgtype) {
    fbb_.AddElement<int8_t>(Frame::VT_MSGTYPE, static_cast<int8_t>(msgtype), 0);
  }
  void add_data_type(EmbDmn::Protocol::Data data_type) {
    fbb_.AddElement<uint8_t>(Frame::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Frame::VT_DATA, data);
  }
  explicit FrameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Frame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Frame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Frame> CreateFrame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    EmbDmn::Protocol::MsgType msgtype = EmbDmn::Protocol::MsgType_Connect,
    EmbDmn::Protocol::Data data_type = EmbDmn::Protocol::Data_NONE,
    ::flatbuffers::Offset<void> data = 0) {
  FrameBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_msgtype(msgtype);
  return builder_.Finish();
}

inline bool VerifyData(::flatbuffers::Verifier &verifier, const void *obj, Data type) {
  switch (type) {
    case Data_NONE: {
      return true;
    }
    case Data_deviceinfo: {
      auto ptr = reinterpret_cast<const EmbDmn::Protocol::DeviceInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyData(
        verifier,  values->Get(i), types->GetEnum<Data>(i))) {
      return false;
    }
  }
  return true;
}

inline const EmbDmn::Protocol::Frame *GetFrame(const void *buf) {
  return ::flatbuffers::GetRoot<EmbDmn::Protocol::Frame>(buf);
}

inline const EmbDmn::Protocol::Frame *GetSizePrefixedFrame(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EmbDmn::Protocol::Frame>(buf);
}

inline bool VerifyFrameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EmbDmn::Protocol::Frame>(nullptr);
}

inline bool VerifySizePrefixedFrameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EmbDmn::Protocol::Frame>(nullptr);
}

inline void FinishFrameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EmbDmn::Protocol::Frame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFrameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EmbDmn::Protocol::Frame> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Protocol
}  // namespace EmbDmn

#endif  // FLATBUFFERS_GENERATED_FBSCHEMA_EMBDMN_PROTOCOL_H_
